/************************************************************************************************************************/
/*
7.改进冒泡排序 
题目内容：
对传统冒泡算法进行改进，策略1：若一趟中无交换，说明序列有序则提前算法；
策略2：在排序过程中发现部分序列未曾交换过，则下次不参与比较。
要求集成这两种改进策略写出改进的冒泡排序算法。
输入描述
输入数据的个数n，再输入n个数
输出描述
输出改进算法排升序序列过程中的数据比较次数和交换次数之和。
输入样例
样例1:6 1 2 3 6 4 5
样例2:7 1 2 3 6 7 4 5
输出样例
样例1:8
样例2:13
*/ 

#include<stdio.h>
int main()
{
	int n,a[100],i,j,k,q=0,p=0,temp;//比较次数p，交换次数q; 
	int Pos,Temp=0;//做标记 
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	
	for(i=0;i<n-1;i++)
	{
		Pos=Temp;//从之前的有序序列开始比较 
		for(j=n-1;j>Pos;j--)
		{
			if(a[j]<=a[j-1])
			{
				temp=a[j];
				a[j]=a[j-1];
				a[j-1]=temp;
				
				Temp=j;//存储最后的比较 
			q++;	
			}p++;
		}
		
		if(Pos==Temp) 
			break;	
	}
	/*for(i=0;i<n;i++)
	{
		printf("%d ",a[i]);
	}*/
	printf("\n%d",p+q);	
	
	return 0;
}
/************************************************************************************************************************/
/*
1004. 成绩排名 (20)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CHEN, Yue
读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。
输入格式：每个测试输入包含1个测试用例，格式为
  第1行：正整数n
  第2行：第1个学生的姓名 学号 成绩
  第3行：第2个学生的姓名 学号 成绩
  ... ... ...
  第n+1行：第n个学生的姓名 学号 成绩
其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。

输出格式：对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。
输入样例：
3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95
输出样例：
Mike CS991301
Joe Math990112
*/ 

#include<iostream>
using namespace std;

struct chengji{
	char name[100];
	char number[100];
	int grade;
	
};

int main()
{
	chengji a[100];
	int n;
	scanf("%d",&n);
	int i,j,k;
	int max=0,min=0;
	for(i=0;i<n;i++)
	{
		cin>>a[i].name>>a[i].number>>a[i].grade;
		if(a[i].grade>a[max].grade)
			max=i;
		if(a[i].grade<a[min].grade)
			min=i;
	}

	cout<<a[max].name<<' '<<a[max].number<<endl;
	cout<<a[min].name<<' '<<a[min].number<<endl;
	
	return 0;
}


/************************************************************************************************************************/
/*
1015. 德才论 (25)
宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，
才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。” 
现给出一批考生的德才分数，请根据司马光的理论给出录取排名。 
输入格式： 
输入第1行给出3个正整数，分别为：N（<=105），即考生总数；L（>=60），为录取最低分数线，即德分和才分均不低于L的考生才
有资格被考虑录取；H（<100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到
低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于H，但是德分不低
于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线L的考生也按总分排序，
但排在第三类考生之后。 
随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。
数字间以空格分隔。

输出格式： 
输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到
低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。 
输入样例：
14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60
输出样例：
12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90
*/ 

/*题解：
首先需要用printf,scanf输入输出，不然超时，超时，超时！ 
其次此题用结构体方便快捷，不要用什么二维数组。 
看清题意，理解好四类考生怎么划分的：假设最低分数线60，优先录取线80， 
首先注意才德都大于60才有资格 
那么成绩分布就有以下六种情况： 
1、双>=80且德>=才 
2、双>=80且德<才 
3、双<80且德>=才 
4、双<80且德<才 
5、一大一小,德>=80，才<80 
6、一小一大,德<80,才>=80 
根据题意： 
第一类 1,2： 如90,90 
第二类 5： 如90,70 
第三类 3： 如75 70 
第四类 4,6： 如75 70,或者70,90 

*/ 
#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
struct Student
{
    char id[10];
    int moral;
    int talent;
};
bool Cmp(Student a,Student b)
{
    if((a.moral+a.talent)!=(b.moral+b.talent))  //首先比较总分 
    return a.moral+a.talent>b.moral+b.talent;
    else                                        //总分相同比较德分 
    {
        if(a.moral!=b.moral)
        {
            return a.moral>b.moral;         
        }
        else 
        {
         return strcmp(a.id,b.id)<0;            //德分相同比较id 
        }
    } 
}
int main()
{
    int count=0;
    vector<Student>v1,v2,v3,v4; 
    Student students;
    int N,L,H;
    scanf("%d%d%d",&N,&L,&H); 
    for(int i=0;i<N;i++)
    {   //输入数据的时候顺便分类 
        scanf("%s%d%d",students.id,&students.moral,&students.talent);
        if(students.moral>=L&&students.talent>=L)
        {
            count++;
            //第一类考生 
            if(students.moral>=H&&students.talent>=H)
            v1.push_back(students); 
            //第二类 
            else if(students.moral>=H&&students.talent<H) 
            v2.push_back(students); 
            //第三类 
            else if(students.moral<H&&students.talent<H&&students.moral>=students.talent)
            v3.push_back(students); 
            //余下为第四类 
            else v4.push_back(students);    
        }

    }
    sort(v1.begin(),v1.end(),Cmp);//Cmp为自定义的比较函数 
    sort(v2.begin(),v2.end(),Cmp);
    sort(v3.begin(),v3.end(),Cmp);
    sort(v4.begin(),v4.end(),Cmp);

        printf("%d\n",count); 

        vector<Student>::iterator iter;//迭代器遍历vector 

        for(iter=v1.begin();iter!=v1.end();iter++)
        printf("%s %d %d\n",iter->id,iter->moral,iter->talent);  

        for(iter=v2.begin();iter!=v2.end();iter++)
        printf("%s %d %d\n",iter->id,iter->moral,iter->talent);  

        for(iter=v3.begin();iter!=v3.end();iter++)
        printf("%s %d %d\n",iter->id,iter->moral,iter->talent);  

        for(iter=v4.begin();iter!=v4.end();iter++)
        printf("%s %d %d\n",iter->id,iter->moral,iter->talent); 
    return 0;   
} 
/************************************************************************************************************************/
/*
1038. 统计同成绩学生(20)
本题要求读入N名学生的成绩，将获得某一给定分数的学生人数输出。
输入格式： 
输入在第1行给出不超过105的正整数N，即学生总人数。随后1行给出N名学生的百分制整数成绩，中间以空格分隔。
最后1行给出要查询的分数个数K（不超过N的正整数），随后是K个分数，中间以空格分隔。 
输出格式： 
在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。 
输入样例：
10
60 75 90 55 75 99 82 90 75 50
3 75 90 88
输出样例：
3 2 0
*/ 
#include<iostream>
using namespace std;

int main()
{
	int n;
	int aa;
	int temp[101]={0};
	cin>>n;
	for(int i=0;i<n;i++)
	{
		cin>>aa;
		if(aa>=0&&aa<=100)
			temp[aa]++;
	}
	int m;
	int bb;
	cin>>m;
	for(int i=0;i<m;i++)
	{
		cin>>bb;
		if(i)
		{
			cout<<" "<<temp[bb];
		}
		else
		{
			cout<<temp[bb];
		}
	}
	
	
	return 0;
}
/************************************************************************************************************************/
/*
1035. 插入与归并(25)
根据维基百科的定义：
插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。
如此迭代直到全部元素有序。
归并排序进行如下迭代操作：首先将原始序列看成N个只包含1个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下1个有序的序列。
现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？
输入格式： 
输入在第一行给出正整数N (<=100)；随后一行给出原始序列的N个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。
数字间以空格分隔。 
输出格式： 
首先在第1行中输出“Insertion Sort”表示插入排序、或“Merge Sort”表示归并排序；然后在第2行中输出用该排序算法再迭代一轮的结果序列。
题目保证每组测试的结果是唯一的。数字间以空格分隔，且行末不得有多余空格。 

输入样例1：
10
3 1 2 8 7 5 9 4 6 0
1 2 3 7 8 5 9 4 6 0
输出样例1：
Insertion Sort
1 2 3 5 7 8 9 4 6 0
输入样例2：
10
3 1 2 8 7 5 9 4 0 6
1 3 2 8 5 7 4 9 0 6
输出样例2：
Merge Sort
1 2 3 8 4 5 7 9 0 6
*/ 

#include <iostream>  
#include <algorithm>  
using namespace std;  
int cmp(int a, int b) {  //定义比较函数 
 return a < b;  
}  
int main() {  
    int n;  
    cin >> n;  
    int *a = new int [n];  
    int *b = new int [n];  
      
    for (int i = 0; i < n; i++) 
        cin >> a[i];  
    for (int i = 0; i < n; i++) 
        cin >> b[i];   
      
    int i, j;  
    for (i = 0; i < n - 1 && b[i] <= b[i + 1]; i++);  // 找到b[]数组中有序序列的尾坐标 
    for (j = i + 1; a[j] == b[j] && j < n; j++);  //a数组中找到和b相同的数字，如果后面都没有和b数列相同的数字，则是插入排序 
    if (j == n)
	{  //如果j==n，则是插入排序 
        cout << "Insertion Sort" << endl;  
        sort(a, a + i + 2, cmp);  //进行第一步排序，即从无序后的两个数字进行排序 
    } 
	else
	 {  //归并排序情况 
        cout << "Merge Sort" << endl;  
        int k = 1;  
        int flag = 1;  
        while(flag)
		 {  
            flag = 0;  
            for (i = 0; i < n; i++)
			 {  
                if (a[i] != b[i])  //找到不相等的下标并记录，计算需要算几次k的步数 
                    flag = 1;  
            }  
            k = k * 2;  //步数每次*2 
            for (i = 0; i < n / k; i++)
                sort(a + i * k, a + (i + 1) * k, cmp);  //按步数进行排序归并  
            sort(a + n / k * k, a + n, cmp);  
        }  
    }  
      
    for (j = 0; j < n - 1; j++) {  
        cout << a[j] << " ";  
    }  
    cout << a[n - 1];  
    return 0;  
}  
/************************************************************************************************************************/
/*
1045. 快速排序(25)
时间限制 
200 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CAO, Peng
著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，
比主元大的元素放到它的右边。 给定划分后的N个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？
例如给定N = 5, 排列是1、3、2、4、5。则：
1的左边没有元素，右边的元素都比它大，所以它可能是主元；
尽管3的左边元素都比它小，但是它右边的2它小，所以它不能是主元；
尽管2的右边元素都比它大，但其左边的3比它大，所以它不能是主元；
类似原因，4和5都可能是主元。
因此，有3个元素可能是主元。 
输入格式： 
输入在第1行中给出一个正整数N（<= 105）； 第2行是空格分隔的N个不同的正整数，每个数不超过109。 
输出格式： 
在第1行中输出有可能是主元的元素个数；在第2行中按递增顺序输出这些元素，其间以1个空格分隔，行末不得有多余空格。 
输入样例：
5
1 3 2 4 5
输出样例：
3
1 4 5
*/
#include<iostream>
#include<algorithm>
using namespace std;

int main()
{
	int n;
	cin>>n;
	int aa[n],bb[n],cc[n];
	
	for(int i=0;i<n;i++)
	{
		cin>>aa[i];
		bb[i]=aa[i];
	}
	
	sort(bb,bb+n);
	int count=0;
	int max=0;
	for(int i=0;i<n;i++)
	{
		if(aa[i]>max) max=aa[i];
		if(aa[i]==bb[i]&&bb[i]==max)
		{
			cc[count++]=bb[i];	
		}
	}
	cout<<count<<endl;
	if(count ==0)
	cout<<endl;
	else
	{
		for(int i=0;i<count;i++)
		{
			if(i!=0)
			cout<<' ';
			cout<<cc[i];
		}
	}	
	
	
	
	
	return 0;
}
/************************************************************************************************************************/
/*
1047. 编程团体赛(20)
编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。 
现给定所有队员的比赛成绩，请你编写程序找出冠军队。 
输入格式： 
输入第一行给出一个正整数N（<=10000），即所有参赛队员总数。随后N行，每行给出一位队员的成绩，
格式为：“队伍编号-队员编号 成绩”，其中“队伍编号”为1到1000的正整数，“队员编号”为1到10的正整数，“成绩”为0到100的整数。 
输出格式： 
在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。 
输入样例：
6
3-10 99
11-5 87
102-1 0
102-3 100
11-9 89
3-2 61
输出样例：
11 176
*/
#include<iostream>
using namespace std;
struct team{
	int id;
	int num;
	int score;
};
int main()
{
	int n;
	cin>>n;
	team aa[n];
	int totalscore[100000]={0};
	int max=-1;
	int maxi=-1;
	for(int i=0;i<n;i++)
	{
		scanf("%d-%d%d",&aa[i].id,&aa[i].num,&aa[i].score); 
		totalscore[aa[i].id]+=aa[i].score;
		
	}
	for(int i=0;i<100000;i++)
		if(totalscore[i]>max)
		{
			max=totalscore[i];
			maxi=i;
		}
		
	cout<<maxi<<' '<<totalscore[maxi];
	return 0;
}
/************************************************************************************************************************/
