/*
题目内容：
 Michael喜欢滑雪百这并不奇怪， 因为滑雪的确很刺激。可是为了获得速度，
 滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。
 Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。
 数组的每个数字代表点的高度。下面是一个例子 
 1  2  3  4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。
在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。
事实上，这是最长的一条。
输入描述
输入的第一行表示区域的行数R和列数C(1<=R,C<=100)。下
面是R行，每行有C个整数，代表高度h，0<=h<=10000。
输出描述
输出最长区域的长度。
输入样例
5 5
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
输出样例
25
*/

#include<stdio.h>
#include<iostream>
#include<string.h>
int map[105][105];
int step[105][105];//存储了当前滑最长的距离
int dir[4][2]={{-1,0},{1,0},{0,1},{0,-1}};//定义四个方向
int n,m;

int dfs(int x,int y)
{
	int k,xx,yy,tmp;
	if(step[x][y])
	return step[x][y];//如果这个状态存储了，就可以直接返回 
	
	tmp=0;
	
	for(k=0;k<4;k++)//把四个方向都走一遍然后存储 
	{
		xx=x+dir[k][0];
		yy=y+dir[k][1];
		 if(map[xx][yy]<map[x][y]&&xx>=0&&xx<n&&yy>=0&&yy<n)
		 {
		 	tmp=dfs(xx,yy);//从周围四个方向滑的区域距离值
			step[x][y]=tmp>=step[x][y]?(tmp+1):(step[x][y]);
			//找出最大值tmp，也就是当前的最优决策，把这个点(x,y)的step[x][y]赋值成tmp+1 
		 }	
	}
	return step[x][y]; 
}

int main()
{
	int i,j;
	int maxx=0,temp;
	
	scanf("%d%d",&n,&m);
	for(i=0;i<n;i++)
		for(j=0;j<m;j++)
			scanf("%d",&map[i][j]);
			
	memset(step,0,sizeof(step));
			
	for(i=0;i<n;i++)
		for(j=0;j<m;j++)
		{
			temp=dfs(i,j);
			if	(temp>maxx)
				maxx=temp;
		}
	printf("%d\n",maxx+1);
	
	return 0;
 } 
/*************************************************************************************************************/

/*************************************************************************************************************/
/*************************************************************************************************************/
/*************************************************************************************************************/
