/*关于0-1背包问题的两个问题和实现代码*/
/*******************************************************************************************************/
/*
简单0-1背包问题 
题目内容：
物品集合U=｛u1,u2…un｝，体积分别为s1,s2…..sn，
价值分别为v1,v2….vn；容量C的背包。设计算法实现放入背包的物品价值最大。
输入描述
第一行输入物品数n,第二行输入每个物品体积，
第三行输入每个物品的价值，第四行输入背包的容量C
输出描述
输出最大价值数。
输入样例
3
3 4 5
4 5 6
10
输出样例
11
*/
#include<stdio.h>
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}

int main()
{
	int n,v[100],p[100],maxv;//n数量，v体积，p价格,maxv最大容量 
	int i,j,k=0;
	int f[100][100];
	v[0]=0;
	p[0]=0;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
		scanf("%d",&v[i]);
	for(i=1;i<=n;i++)
		scanf("%d",&p[i]);
		
	scanf("%d",&maxv);

for (i=1;i<=maxv;i++)//逐行填表，i表示当前可选物品数，j表示当前背包的容量
 { 
    f[i][0] = 0;
    for (j=0;j<=maxv;j++)
	 {
       	 	if (j<v[i]) 
		{
            f[i][j] = f[i-1][j];
        }
		else
		{
            f[i][j] = max(f[i-1][j], f[i-1][j-v[i]]+p[i]);
        }
        k=f[i][j];
    }
}
printf("%d",k);
	return 0;
}
/*******************************************************************************************************/
/*
10.0-1背包问题 (20分) 
题目内容：
背包最大允许装载为C, 有n个物品要放进背包，每个物品的重量为w[1],w[2],...w[n],每个物品的价值为v[1],v[2],...v[n], 
请选择物品装进背包，使得价值最大。C为整数。
输入描述
第一行为物体个数n,以及背包容量C；
第二行为n个重量（实数），空格隔开
第三行为n个价值（实数），空格隔开
输出描述
第一行为最大装载的总价值
第二行为每个物品是否装载，1表示装，0表示不装，中间用空格隔开
(测试数据能保证最优解唯一)
输入样例
5 10
2 2 6 5 4
6 3 5 4 6
输出样例
15
1 1 0 0 1
*/
#include<stdio.h>
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}

int main()
{
	int n,v[100],p[100],a[100]={0},maxv;//n数量，v体积，p价格,maxv最大容量 
	int i,j,k=0;
	int f[100][100]={0};
	v[0]=0;
	p[0]=0;
	scanf("%d%d",&n,&maxv);
	for(i=1;i<=n;i++)
		scanf("%d",&v[i]);
	for(i=1;i<=n;i++)
		scanf("%d",&p[i]);

	for (i=1;i<=maxv;i++)//逐行填表，i表示当前可选物品数，j表示当前背包的容量
	 { 
	    f[i][0] = 0;
	    for (j=0;j<=maxv;j++)
		 {
	        if (j<v[i]) 
			{
	            f[i][j] = f[i-1][j];
	        }
			else
			{
	            f[i][j] = max(f[i-1][j], f[i-1][j-v[i]]+p[i]);
	        }
	        k=f[i][j];
			
	    }
	}
	printf("%d\n",k);
	
	for(i=n;i>0;i--)
	{
		if(f[i][maxv]>f[i-1][maxv])
		{
			a[i-1]=1;	
			maxv-=v[i-1];
		}
		
	}
	for(i=0;i<n;i++)
	printf("%d ",a[i]);
	return 0;
}

/*******************************************************************************************************/


 
