/*关于0-1背包问题的两个问题和实现代码*/
/*******************************************************************************************************/
/*
简单0-1背包问题 
题目内容：
物品集合U=｛u1,u2…un｝，体积分别为s1,s2…..sn，
价值分别为v1,v2….vn；容量C的背包。设计算法实现放入背包的物品价值最大。
输入描述
第一行输入物品数n,第二行输入每个物品体积，
第三行输入每个物品的价值，第四行输入背包的容量C
输出描述
输出最大价值数。
输入样例
3
3 4 5
4 5 6
10
输出样例
11
*/
#include<stdio.h>
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}

int main()
{
	int n,v[100],p[100],maxv;//n数量，v体积，p价格,maxv最大容量 
	int i,j,k=0;
	int f[100][100];
	v[0]=0;
	p[0]=0;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
		scanf("%d",&v[i]);
	for(i=1;i<=n;i++)
		scanf("%d",&p[i]);
		
	scanf("%d",&maxv);

for (i=1;i<=maxv;i++)//逐行填表，i表示当前可选物品数，j表示当前背包的容量
 { 
    f[i][0] = 0;
    for (j=0;j<=maxv;j++)
	 {
       	 	if (j<v[i]) 
		{
            f[i][j] = f[i-1][j];
        }
		else
		{
            f[i][j] = max(f[i-1][j], f[i-1][j-v[i]]+p[i]);
        }
        k=f[i][j];
    }
}
printf("%d",k);
	return 0;
}
/*******************************************************************************************************/
/*
10.0-1背包问题 (20分) 
题目内容：
背包最大允许装载为C, 有n个物品要放进背包，每个物品的重量为w[1],w[2],...w[n],每个物品的价值为v[1],v[2],...v[n], 
请选择物品装进背包，使得价值最大。C为整数。
输入描述
第一行为物体个数n,以及背包容量C；
第二行为n个重量（实数），空格隔开
第三行为n个价值（实数），空格隔开
输出描述
第一行为最大装载的总价值
第二行为每个物品是否装载，1表示装，0表示不装，中间用空格隔开
(测试数据能保证最优解唯一)
输入样例
5 10
2 2 6 5 4
6 3 5 4 6
输出样例
15
1 1 0 0 1
*/
#include<stdio.h>
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}

int main()
{
	int n,v[100],p[100],a[100]={0},maxv;//n数量，v体积，p价格,maxv最大容量 
	int i,j,k=0;
	int f[100][100]={0};
	v[0]=0;
	p[0]=0;
	scanf("%d%d",&n,&maxv);
	for(i=1;i<=n;i++)
		scanf("%d",&v[i]);
	for(i=1;i<=n;i++)
		scanf("%d",&p[i]);

	for (i=1;i<=maxv;i++)//逐行填表，i表示当前可选物品数，j表示当前背包的容量
	 { 
	    f[i][0] = 0;
	    for (j=0;j<=maxv;j++)
		 {
	        if (j<v[i]) 
			{
	            f[i][j] = f[i-1][j];
	        }
			else
			{
	            f[i][j] = max(f[i-1][j], f[i-1][j-v[i]]+p[i]);
	        }
	        k=f[i][j];
			
	    }
	}
	printf("%d\n",k);
	
	for(i=n;i>0;i--)
	{
		if(f[i][maxv]>f[i-1][maxv])
		{
			a[i-1]=1;	
			maxv-=v[i-1];
		}
		
	}
	for(i=0;i<n;i++)
	printf("%d ",a[i]);
	return 0;
}

/*******************************************************************************************************/

/*
4.快乐 
题目内容：
没有买到奥运会的门票让YF伤心不已，为了使自己开心起来，他去找周围的人聊天，
每找一个人聊天，他就会耗费一定的体力，但他会得到一定量的快乐。
YF试图使自己尽可能的高兴，但一旦体力耗尽了(为零或为负)，他也就挂了，
就一点快乐都没有了。现在Yk初始有100点体力，他最多可以获得多少快乐？
输入描述
数据分多组，对于每组数据：第一行为n，表示有YK的n(0<n<21)个朋友。
第二行表示和每个人聊天耗费的体力，
第三行表示每个人所能提供的快乐值。输入以一个0结束。
输出描述
对于每组输出，输出一个值，YK可以获得的最大的快乐值。
输入样例
3
1 21 79
20 30 25
4
100 100 100 100
1 2 3 4
0
输出样例
50
0
*/ 
/*分析：背包问题*/ 
#include<stdio.h>

int max(int a,int b)
{
	return a>b?a:b;
}

int main()
{
	int n;
	int i,t=0,k=0;
	int power[200],happy[200];
	int maxfun[200],sum[200]={0};
	
	while(scanf("%d",&n)&&n)
	{
		
		for(i=0;i<100;i++)
			maxfun[i]=0;
		for(i=0;i<n;i++)
			scanf("%d",&power[i]);//输入体力 
		for(i=0;i<n;i++)
			scanf("%d",&happy[i]);//输入快乐
		for(i=0;i<n;i++)
			for(k=99;k>=power[i];k--)
			{
				maxfun[k]=max(maxfun[k-power[i]]+happy[i],maxfun[k]);
			}
		
		sum[t++]=maxfun[99];
	}
	
	for(i=0;i<t;i++)
	{
		printf("%d\n",sum[i]);
	 } 	
	return 0;
}
/*******************************************************************************************************/
/*
链接：https://www.nowcoder.com/acm/contest/119/F
来源：牛客网
题目描述
It’s universally acknowledged that there’re innumerable trees in the campus of HUST. Now HUST got a big land whose capacity is C to plant trees. We have n trees which could be plant in it. Each of the trees makes HUST beautiful which determined by the value of the tree. Also each of the trees have an area cost, it means we need to cost ci area of land to plant. We know the cost and the value of all the trees. Now HUSTers want to maximize the value of trees which are planted in the land. Can you help them?
输入描述:
There are multiple cases.The first line is an integer T(T≤10), which is the number of test cases.For each test case, the first line is two number n(1≤n≤100) and C(1≤C≤108), the number of seeds and the capacity of the land. Then next n lines, each line contains two integer ci(1≤ci≤106) and vi(1≤vi≤100), the space cost and the value of the i-th tree.
输出描述:
For each case, output one integer which means the max value of the trees that can be plant in the land.
示例1
输入
1
3 10
5 10
5 10
4 12
输出
22
*/ 


#include<stdio.h>
int max(int a,int b)
{
	return a>b?a:b;
}

int main()
{
	int n,v[100],p[100],maxv;//n数量，v体积，p价格,maxv最大容量 
	int i,j,k=0;
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int f[100][100];
		v[0]=0;
		p[0]=0;
		scanf("%d%d",&n,&maxv);
		for(i=1;i<=n;i++)
			scanf("%d%d",&v[i],&p[i]);
	for (i=1;i<=maxv;i++)//逐行填表，i表示当前可选物品数，j表示当前背包的容量
	 { 
	    f[i][0] = 0;
	    for (j=0;j<=maxv;j++)
		 {
	       	 	if (j<v[i]) 
			{
	            f[i][j] = f[i-1][j];
	        }
			else
			{
	            f[i][j] = max(f[i-1][j], f[i-1][j-v[i]]+p[i]);
	        }
	        k=f[i][j];
	    }
	}
	printf("%d",k);
	}
	return 0;
}
/*
算法优化
#include<stdio.h> 
#define MAXSIZE 9000000
#define ll long long
ll int w[MAXSIZE];
ll int v[MAXSIZE];
ll int maxv;
ll int n;
ll int dp[MAXSIZE]={0};

ll int max(ll int a,ll int b)
{
    return a>b?a:b;
}
int main()
{
ll int T;
	scanf("%lld",&T);
	while(T--)
	{
		scanf("%lld%lld",n,maxv);
	    for (int i = 1; i <= n; i++)
	    {
	        scanf("%lld%lld",&w[i],&v[i]);
	    }
	    for (int i = 1; i <= n; i++)
	    {
	        //只有当j >= w[i],dp[j]才能进行选取最大值,否则dp[j]将不作更新，等于dp[i-1][j]。
	        for (int j = maxv; j >= w[i]; j--)
	        {
	            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
	        }
	        
	    }
	
	    printf("%lld",dp[maxv]);	
	}
    
    return 0;
} 
*/ 


/*
可提交版
#include <iostream>
#include <cstring>
 
using namespace std;
 
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, c;
        cin >> n >> c;
        long long w[n], v[n];
        for (int i = 0; i < n; i++)
            cin >> w[i] >> v[i];
 
        long long ans[10005];
        memset(ans, 0x3f, sizeof(ans));
        const long long INF = ans[0];
        ans[0] = 0;
 
        for (int i = 0; i < n; i++)
            for (int j = 10000; j >= 0; --j)
                if (ans[j] < INF)
                    ans[j + v[i]] = min(ans[j + v[i]], ans[j] + w[i]);
 
        int i = 10000;
        while (ans[i] > c)
            --i;
        cout << i << endl;
    }
    return 0;
} 

*/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/






 
