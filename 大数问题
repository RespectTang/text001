/*
7.x的y次方后三位 (5分) 
题目内容：
解本题最直接的方法是：将13累乘13次方截取最后三位即可。
但是由于计算机所能表示的整数范围有限，用这种“正确”的算法不可能得到正确的结果。事实上，题目仅要求最后三位的值，
完全没有必要求13的13次方的完整结果。
研究乘法的规律发现：乘积的最后三位的值只与乘数和被乘数的后三位有关，与乘数和被乘数的高位无关。利用这一规律，
可以大大简化程序。
输入描述
数据分n组，对于每组数据有两个正整数x和y（x的y次方必须大于100）
输出描述
对于每组输出，输出一个值，即x的y次方结果的最后三位数
提示：13的13次方为：302875106592253（这个数已经超出一般计算机表示的范围了）
输入样例
1
13 13
输出样例
253
*/ 

#include<stdio.h>
int main()
{
	int a,b;
	int n;
	scanf("%d",&n);
	while(n--)
	{
		scanf("%d%d",&a,&b);
	
		int last=1;
		for(int i=1;i<=b;i++)
		{
		last=last*a%1000;//last为每次乘积的最后三位 
		}
		printf("%d\n",last);
	}
		

	return 0;
}

/*************************************************************************************************************/
/*大数相乘问题-逐位相乘处理进位法*/
#include<stdio.h>
//#include<iostream>
//using namespace std;
int main()
{
	int n,i,j;
	scanf("%d",&n);
//	while()
	//while (cin>>n)
//	{
		int flag=1;
		int carry=0;//设置进位
		int res=0;
		int str[40000];//根据题目要求设置数组的大小
		str[0]=1;
		for(i=2;i<=n;i++)//从2开始计算阶乘
		{
			for(j=1;j<=flag;j++)//根据进位flag大小来判断当前阶乘结果的的位数
			{
			res=str[j-1]*i+carry;
			str[j-1]=res%10;
			carry=res/10;
			}
			while(carry)//当进位大于一时将结果扩展到下一位
			{
				flag++;
				str[flag-1]=carry%10;
				carry/=10;
			}
		}
		for (i=flag-1;i>=0;i--)//将结果数组倒序输出，注意最后一位是"i=flag-1",因为"flag=1"对应str[0],以此类推
		{
			
			printf("%d",str[i]);//cout<<str[i];
		}
		//cout<<endl;
//	 }
	return 0;
}
/*************************************************************************************************************/
/*
1.高精度加法 (15分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
 输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。但a和b都可能会很多大、
输入描述
输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。
输出描述
输出一行，表示a + b的值。
输入样例
20100122201001221234567890
2010012220100122
输出样例
20100122203011233454668012
*/ 
#include<stdio.h>
#include<string.h>
int main()
{
	char s1[101],s2[102];
	int len1,len2,i,j,k;
	int num1[101]={0},num2[101]={0},num3[101]={0};

	gets(s1);
	gets(s2);
	len1=strlen(s1);
	len2=strlen(s2);	
	for(i=len1-1,j=0;i>=0;i--)//倒序存储 
		num1[j++]=s1[i]-'0';
	for(i=len2-1,j=0;i>=0;i--)
		num2[j++]=s2[i]-'0';
	
	if(len1>len2)
	k=len1;
	else
	k=len2;
	
	for(i=0;i<=k;i++)			//加法运算及进位 
	{
		num1[i]+=num2[i];
		if (num1[i]>9)
		{
			num1[i]%=10;
			num1[i+1]++;	
		}
	}
	
	for(i=100;(i>=0)&&(num1[i]==0);i--);//从最高位找出不是零的数字输出 
	if(i>=0)
	{
		for(;i>=0;i--)
		printf("%d",num1[i]);
	}
	return 0;
}

/*************************************************************************************************************/
/*大数加1问题*/
#include<stdio.h>
#include<string.h>
int main()
{
	char s[101];
	int len,i,j;
	int num[101]={0};                 //数组清零 
	gets(s);                          //输入 
	len=strlen(s);                    //计算长度 
	for(i=len-1,j=0;i>=0;i--)         //存入数组 
	num[j++]=s[i]-'0';
	
	if(num[0]<=9)
	num[0]=num[0]+1;
	for(i=0;i<101;i++)
	{
		if(num[i]==10)
		{
			num[i]=0;
			num[i+1]=num[i+1]+1;
		}
	}
	
	for(i=100;(i>=0)&&(num[i]==0);i--);//从最高位找出不是零的数字输出 
	if(i>=0)
	{
		for(;i>=0;i--)
		printf("%d",num[i]);
	}
	return 0;
}

/*************************************************************************************************************/
/*
11.大数阶乘 (20分) 
题目内容：
 一个整型变量只能用来存贮较小的n!的值，当 n 较大时，可将阶乘值中的每一个数字放在一个一维数组的一个元素中。使用这方法，打印n!的值；
输入描述
整数n
输出描述
n!的值
输入样例
18
输出样例
6402373705728000
*/
#include<stdio.h>
int main()
{
	int n,i,j;
	scanf("%d",&n);
		int flag=1;
		int carry=0;//设置进位
		int res=0;
		int str[40000];//根据题目要求设置数组的大小
		str[0]=1;
		for(i=2;i<=n;i++)//从2开始计算阶乘
		{
			for(j=1;j<=flag;j++)//根据进位flag大小来判断当前阶乘结果的的位数
			{
			res=str[j-1]*i+carry;//res存储每一位乘以i并加上进位 
			str[j-1]=res%10;//存储个位数 
			carry=res/10;//计算进位 
			}
			while(carry)//当进位大于一时将结果扩展到下一位
			{
				flag++;
				str[flag-1]=carry%10;//向前进一位存储个位数 
				carry/=10;//如果进位超过1继续进行循环 
			}
		}
		for (i=flag-1;i>=0;i--)//将结果数组倒序输出
		{
			
			printf("%d",str[i]);
		}
	return 0;
}

/*************************************************************************************************************/
手写除法
/*
5.分数 (15分) 
题目内容：
写出一个程序，接受一个以N/D的形式输入的分数，其中N为分子，D为分母，输出它的小数形式。
本题中，0≤N≤65535，0<D≤65535，设运算结果小数点后最多保留100位。
输入描述
分别输入N D
输出描述
如果它的小数形式存在循环，则要将其循环节用括号括起来。例如：
1/3= 0.(3)
输入样例
1 7
输出样例
0.(142857)
思路：模仿手算除法 
*/ 

#include<stdio.h>

int *fun(int n,int d)
{
	int i=1,j,k,*c;
	static int a[103];
	c=new int [d]();
	while(n%d!=0&&i!=100)//余数为0或循环到第100位时截止 
	{
		if(c[n%d]!=-1)
			c[n%d]=-1;
		else
		{
			a[0]=-2;//a[0]为-2则出现循环，a[0]是-1的话则是没有出现循环体 
			break;
		}
		
		a[i]=n/d;//a[i]存储n按位除以d所得商 
		n=n%d;
		n=n*10;
		i++;	
	} 
	a[i]=n/d;
	if(a[0]!=-2)
	{
		a[0]=-1;
		a[i+1]=-1;
	}
	else
	{
		a[i+1]=-2; 
	}
	
	return a;
	
 } 

int main()
{
	int N,D,*a;
	
	scanf("%d%d",&N,&D);
	a=fun(N,D);
	int i=1;
	while(i!=100&&a[i]>=0)
	{
		if(i==2)
			if(a[0]==-2)
				printf(".(");
			else
				printf(".");
		printf("%d",a[i]);
		i++;
	}
	if(a[0]==-2)
	{
		printf(")");	
	}	
	
	return 0;
	
}
