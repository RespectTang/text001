/********************************************************************************************************************/
/*
1007. 素数对猜想 (20)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CHEN, Yue
让我们定义 dn 为：dn = pn+1 - pn，其中 pi 是第i个素数。显然有 d1=1 且对于n>1有 dn 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。 
现给定任意正整数N (< 105)，请计算不超过N的满足猜想的素数对的个数。
输入格式：每个测试输入包含1个测试用例，给出正整数N。
输出格式：每个测试用例的输出占一行，不超过N的满足猜想的素数对的个数。
输入样例：
20
输出样例：
4
*/

#include<iostream>
#include<math.h>
#include<stdlib.h>
using namespace std;

int n;
int i,j,k;

int sushu(int k)
{
	for(j=2;j<=sqrt(k);j++)
		if(k%j==0)
			return 0;
	return 1;
}

int main()
{
	cin>>n;
	int x=2,y=3;
	int count=0;
	for(i=4;i<=n;i++)
	{
		if(sushu(i))
		{
			x=y;
			y=i;
			if(y-x==2)
				count++;
		}
	}
	cout<<count<<endl; 
}
/********************************************************************************************************************/
/*
1013. 数素数 (20)
时间限制 
100 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CHEN, Yue
令Pi表示第i个素数。现任给两个正整数M <= N <= 104，请输出PM到PN的所有素数。
输入格式： 
输入在一行中给出M和N，其间以空格分隔。
输出格式： 
输出从PM到PN的所有素数，每10个数字占1行，其间以空格分隔，但行末不得有多余空格。
输入样例：
5 27
输出样例：
11 13 17 19 23 29 31 37 41 43
47 53 59 61 67 71 73 79 83 89
97 101 103
*/
#include<iostream>
#include<math.h>
using namespace std;
int a[500];

int sushu(int k)
{
	for(int j=2;j<=sqrt(k);j++)
		if(k%j==0)
			return 0;
	return 1;
}
int main()
{
	int i,j=0,k=0;
	int m,n;
	cin>>m>>n;
	for(i=2;i<5000;i++)
	{
		if(sushu(i))
			a[j++]=i;
	}
	
	for(i=m-1;i<=n-1;i++)
	{
		
		k++;
		if(k%10==1)
			printf("%d",a[i]);
		else if(k%10==0)
			printf("\n");
		else 
			printf(" %d",a[i]);
			
	}		
	
	return 0;
}

/*
可提交

#include<stdio.h>
#include<math.h>
#define M 110001
//必须保证M的数值范围符合题目中所述的第一万个素数，否则会出现段错误，即数组内存不足 
int Array[M];
int primeArray[M];
void searchPrime()
{
    int tmp = (int)sqrt(M)+1;
    for(int i=2; i<tmp; i++)
    {
        if(Array[i] == 1)
            continue;
        for(int j=i*i; j<M; j+=i)
        {
            Array[j] = 1;
        }
    }
    
    int cnt = 0;
    for(int i=2; i<M; i++)
    {
        if(Array[i] == 0)
            primeArray[cnt++] = i;
    }
    
}
int main()
{
    int m;
    int n;
    scanf("%d%d",&m,&n);
    searchPrime();
    for(int i=m-1,cnt = 1; i<n; i++)
    {
        if(cnt%10 == 0)
            printf("%d\n",primeArray[i]);
        
        else if(i == n-1)
            printf("%d",primeArray[i]); 
        else
        printf("%d ",primeArray[i]);
        cnt++;
    }
        
//    test
//    printf("第一万个素数：%d",primeArray[9999]);
    
    return 0;
    
}
 
*/

/********************************************************************************************************************/

/********************************************************************************************************************/

/********************************************************************************************************************/

/********************************************************************************************************************/

/********************************************************************************************************************/

/********************************************************************************************************************/
