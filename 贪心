/*
9.找零钱 (5分) 
题目内容：
一个小孩买了价值少于1美元的糖，假设提供了数目不限的面值为2 5美分、1 0美分、5美分、及1美分的硬币，写一个算法让小孩用最少的硬币付款。1美元=100美分
输入描述
糖的价格
输出描述
4种硬币的个数，中间用空格隔开。
输入样例
75
输出样例
3 0 0 0
*/

#include<stdio.h>
int main()
{
	int a,b,c,d,n;
	scanf("%d",&n); 
	a=n/25;
	n-=a*25;
	b=n/10;
	n-=b*10;
	c=n/5;
	n-=c*5;
	d=n;
	printf("%d %d %d %d",a,b,c,d);

	
	
	return 0;
 } 
/*****************************************************************************************************************/
/*
8.短信套餐 (10分)
题目内容：
 某通信公司为推广手机短信，提出了短信套餐优惠政策。
用户必须选择一种短信套餐，且只能选择一种。每种套餐的形式为：每月交p元，可以发送免费短信f条。如果超过了f条，
则超过的部分按每条a元收费。现在你已经预知下个月需要发送m条短信，现在，这家公司的短信套餐种类太多了，请您编个
程序告诉他选择最省钱的短信套餐需要交多少钱。
输入描述
输入有多组数据。每组数据第一行为整数n和m，用一个空格隔开，分别是套餐的种类数和下月短信条数。1<=n<=1000，0<=m<=10000
下一行有一个实数a，表示超过的部分按每条a元收费。（0<a<=2）
以下的n行，每行有实数p和整数f，用一个空格隔开，表示这种短信套餐为p元可以发送短信f条。（0<=p<=100,1<=f<=10000）。
输出描述
对每组输入数据，输出采用最省钱的短信套餐需交的费用。保留小数点后两位数。
输入样例
5 222
0.1
10 120
15 200
20 300
30 500
50 1000
输出样例
17.20
*/

#include<stdio.h>
int main()
{
	float n,m,a;//n种套餐，要发m条短信，超过后按每条a元收费 
	float p[100],f[100];//p元可以发f条短信 
	float x[100];
	int i,j=0,k;
	float sum[100]={0};
	while(scanf("%f",&n))
	{
	scanf("%f",&m);
	scanf("%f",&a);
	for(i=0;i<n;i++)
	{
		scanf("%f%f",&p[i],&f[i]);
		if(f[i]>=m)
		{
			sum[i]=p[i]; 
		}
		else
		{
			sum[i]=(m-f[i])*a+p[i];
		}		
	}
	double min=sum[0];
	for(i=0;i<n;i++)
	{
		if(sum[i]<=min)
		{
			min=sum[i];
		 } 
	}
	if(min-(int)min<0.000001)
	printf("%d\n",(int)min);
	else
	printf("%.2f\n",min);
	}	
	return 0;
}
/*可提交版*/
/*
#include <stdio.h>
int main()
{
	int n, m, f, i;
	double fee, p, t, min;
	while (scanf("%d %d", &n, &m)==2 && (n||m)){
		scanf("%lf", &fee);
		n--;
		scanf("%lf %d", &p, &f);
		min = p;
		if (m > f) min += (m-f)*fee;
		while (n--){
			scanf("%lf %d", &p, &f);
			t = p;
			if (m > f) t += (m-f)*fee;
			if (t < min) min = t;
		}
		if(min-(int)min<0.000001)
	printf("%d\n",(int)min);
	else
	printf("%.2f\n",min);
	}
	return 0;
}

*/



/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/
