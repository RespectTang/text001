/*
8.同色三角形 (15分) 
题目内容：
 平面上有n个点（n≤8000），每两个点之间都有一条红色或者是黑色的线段，任意三点均不共线。
现在，已知哪些点之间连的线段是红色的，剩下的线段都是黑色的，要求计算这些点组成的三角
形中有多少是同色的（顶点编号从1到n）？
输入描述
第一行是n, m（3≤n≤8000），n表示点的个数，m表示红色线段的条数。下面m行，每
一行都是两个整数a和b，表示点a和点b之间的线段是红色的（a<b）。
输出描述
只有一行，表示同色三角形的个数。
提示：本题输出数据可能会超出长整数（long int）的范围。
输入样例
6 5  
1 2  
1 3
2 3
2 5
3 6
输出样例
7
*/ 
#include<stdio.h>
#define N 8001

int colorline[N][N]={0};//将所有线设为黑色

int main() 
{
	
	int n,m;//点的数目和红色线的条数 
	int x,y;//点的坐标
	int t=0;//记录同色三角形的个数
	int i,j,k; 
	
	scanf("%d%d",&n,&m);
	
	for(i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);//输入点的坐标 
		colorline[x][y]=colorline[y][x]=1;//1表示红色线
	 } 
	
	for(i=1;i<=n;i++)
		for(j=i+1;j<=n;j++)
			for(k=j+1;k<=n;k++)
			{
				if(colorline[i][j]==colorline[i][k]&&colorline[i][j]==colorline[j][k])
				t++;
			}
	
	printf("%d",t);

	return 0;
 } 

/****************************************************************************************************/
/*
8.数字三角形 (20分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
给定一个由n行数字组成的数字三角形，试设计一个算法，计算出从三角形的顶到底的一条路径，
使该路径经过的数字总和最大(输入时，这n行数字构成一个直角三角形，参见输入样例，计算路径时，
上面一个元素a只能选择下面一行中处于a正下方的b，或者b右边的元素c相连。反过来，
下面一个元素x,则只能跟正上面一个元素y, 或者y左边一个元素z相连）。
输入描述
第一行输入数字三角的行数n(0<n<100)，后面输入n行数字，每行元素个数递增,数据为100以内整数。
输出描述
输出最大值。
输入样例
5
7
3 8
8 1 0 
2 7 4 4
4 5 2 6 5
输出样例
30
*/

#include<stdio.h>
int n;
int a[100][100];

int max(int p,int q)
{
	if(q>p)
	return q;
	else
	return p;
}

int m(int i,int j)
{
	int x,y;
	if(i==n)
		return a[i][j]; 

	x=m(i+1,j);
	y=m(i+1,j+1);
		return max(x,y)+a[i][j];
		
	
}

int main(int argc, char const *argv[])
{
	int i,j,k;
	
	scanf("%d",&n);
	
	for(i=1;i<=n;i++)
		for(j=1;j<=i;j++)
		{
			scanf("%d",&a[i][j]);
		}
		
	printf("%d",m(1,1));
	
	return 0;
}

/****************************************************************************************************/
/*
4.线数目 (15分) 
题目内容：
现有画有黑线（直线或曲线）的白底图片一张，计算出有多少条黑线、并依次输出每条黑线所占的点数。图片我们用0、1图表示
，1代表黑点 0 代表白点，某点周围8个方向都算连通，如下图所示，共有3条黑线，长度分别是5、3、5：
1 0 0 0 0 0 0
0 1 1 1 1 0 0
0 0 0 0 0 0 0
1 1 0 0 0 1 1
1 0 0 1 1 1 0
输入描述
图的宽w、高h，换行输入图的像素点.(测试数据结果唯一确定)
输出描述
黑线条数、换行输出每条线长度.（条数及每个长度各占一行）.
输入样例
7 5 
1 0 0 0 0 0 0
0 1 1 1 1 0 0
0 0 0 0 0 0 0
1 1 0 0 0 1 1
1 0 0 1 1 1 0
输出样例
3
5
3
5
*/
#include<stdio.h>
#define MAX 100
	int map[MAX][MAX]={0},b[MAX];
	int h,w,i,j,k=0;
int find(int i,int j)
{
	if(map[i][j]==1)
		{
			map[i][j]=0; 
			
			/*return find(i-1,j-1)+find(i-1,j)+
			find(i-1,j+1)+find(i,j-1)+
			find(i,j+1)+find(i+1,j-1)+
			find(i+1,j)+find(i+1,j+1)+1;*/
			return find(i-1,j-1)+find(i,j-1)+find(i+1,j-1)+find(i-1,j)+find(i+1,j)+find(i-1,j+1)+find(i,j+1)+find(i+1,j+1)+1;
		}
	else
		return 0;
}

int main()
{

	scanf("%d%d",&w,&h);
	
	for(i=1;i<=h;i++)
		for(j=1;j<=w;j++)
		{
			scanf("%d",&map[i][j]);
		 } 
	for(i=1;i<=h;i++)
		for(j=1;j<=w;j++)
		{
			int sum=find(i,j);
			if(sum!=0)
				b[k++]=sum;
		}
	printf("%d\n",k);
	
	for(i=0;i<k;i++)
	{
		printf("%d\n",b[i]);
	}
	
	return 0;
}
/****************************************************************************************************/
/*
7.矩形嵌套 
题目内容：
有n个矩形，每个矩形可以用a,b来描述，表示长和宽。矩形X(a,b)可以嵌套在矩形Y(c,d)中
当且仅当a<c,b<d或者b<c,a<d（相当于旋转X90度）。例如（1,5）可以嵌套在（6,2）内，但不能嵌套在（3,4）
中。你的任务是选出尽可能多的矩形排成一行，使得除最后一个外，每一个矩形都可以嵌套在下一个矩形内。
输入描述
第一行是一个正正数N(0<N<10)，表示测试数据组数，每组测试数据的第一行是一个正正数n，
表示该组测试数据中含有矩形的个数(n<=1000)随后的n行，每行有两个数a,b(0<a,b<100)，
表示矩形的长和宽
输出描述
每组测试数据都输出一个数，表示最多符合条件的矩形数目，每组输出占一行
输入样例
1
10
1 2         
2 4
5 8 
6 10
7 9
3 1
5 8
12 10
9 7
2 2
输出样例
5
*/ 

#include<stdio.h>
int main()
{
	int a[100],b[100],s[100]={0},c[100],d[100];//ab数组存储长宽
	int n,m;//n组测试数据，m组矩形
	int i,j,k,temp;
	
	scanf("%d",&n);
	while(n--)
	{
		scanf("%d",&m);
		i=0;
		for(i=0;i<m;i++)
		{
			scanf("%d%d",&a[i],&b[i]);
			s[i]=a[i]*b[i];//计算面积 	
		}
		/*对面积进行排序 */
		for(i=1;i<=m-1;i++)
			for(j=0;j<m-i;j++)
			{
				if(s[j]>s[j+1])
				{
					temp=s[j];
					s[j]=s[j+1];
					s[j+1]=temp;
					
					temp=a[j];
					a[j]=a[j+1];
					a[j+1]=temp;
					
					temp=b[j];
					b[j]=b[j+1];
					b[j+1]=temp; 
					
				}
			}
			
				for(i=0;i<m;i++)
				{
					c[i]=a[i];
					d[i]=b[i];
				}
			
		k=0;
		for(i=0;i<m;i++)
		{
			for(j=i;j<m-i;j++)
			{
				if((a[i]<c[j+1]&&b[i]<d[j+1])||(b[i]<c[j+1]&&a[i]<d[j+1]))
				{
					k++;
					break;
				}
			}
		}
		printf("%d\n",k);
	 } 
	return 0;
}
/****************************************************************************************************/
/*
链接：https://www.nowcoder.net/acm/contest/68/A
来源：牛客网
题目描述
我们定义一个圆 C 为以原点 (0, 0) 为中心的单位圆(半径为 1 的圆)。给定在 C 圆周上相异的两点
A, B。请问由 A 出发，沿着圆周走到 B，是顺时针走比较近，还是逆时针走比较近呢？
C 的圆周上的所有点都可以用 (cos(t), sin(t)) 来表示，其中 t 的物理意义为角度。
也就是说，在圆 C 中，给定一角度 t 即可确定在圆周上的一点。在这题中，所有的角度皆以弧度制表示，
另外，由于不同的t 值有机会对应到同一个圆周上的点，我们限制t 的范围为[-π,π )。
本题中，我们会用tA 以及tB 来代表点A 及点B，数学上，A = (cos(tA), sin(tA)), B = (cos( tB), sin(tB))。 
输入描述:
输入的第一行有一个正整数T，代表接下来共有几组测试数据。接下来的T行，每行有两个浮点数tA, tB，代表一组数据。
输出描述:
对于每组数据请输出一行，如顺时针比较近请输出“clockwise”，否则请输出“counterclockwise”。
输入
3
3.14 3.13
-3.14 -3.13
1.00 2.00
输出
clockwise
counterclockwise
counterclockwise
*/

#include<stdio.h>
#include<math.h>

int main()
{
	double xa,ya,xb,yb;
	double ta,tb;
	int i,j,k;
	int t;
	
	scanf("%d",&t);
	
	for(i=0;i<t;i++)
	{
		scanf("%lf%lf",&ta,&tb);
		//第一象限
		if(sin(ta)>0&&cos(ta)>0)
		{
			if(tan(ta)>tan(tb))
			printf("counterclockwise\n");
			else
			printf("clockwise\n");
		 } 
		 //第二象限
		 if (sin(ta)<0&&cos(ta)>0)
		 {
		 	if(tan(ta)>tan(tb))
			printf("counterclockwise\n");
			else
			printf("clockwise\n");
		 }
		 //第三象限
		 if (sin(ta)<0&&cos(ta)<0)
		 {
		 	if(tan(ta)<tan(tb))
			printf("counterclockwise\n");
			else
			printf("clockwise\n");
		 }
		 if (sin(ta)>0&&cos(ta)<0)
		 {
		 	if(tan(ta)<tan(tb))
			printf("counterclockwise\n");
			else
			printf("clockwise\n");
		 }
		  
	}
	return 0;
}
/****************************************************************************************************/
/*
1050. 螺旋矩阵(25)
本题要求将给定的N个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第1个格子开始，
按顺时针螺旋方向填充。要求矩阵的规模为m行n列，满足条件：m*n等于N；m>=n；且m-n取所有可能值中的最小值。 
输入格式： 
输入在第1行中给出一个正整数N，第2行给出N个待填充的正整数。所有数字不超过104，相邻数字以空格分隔。 
输出格式： 
输出螺旋矩阵。每行n个数字，共m行。相邻数字以1个空格分隔，行末不得有多余空格。 
输入样例：
12
37 76 20 98 76 42 53 95 60 81 58 93
输出样例：
98 95 93
42 37 81
53 20 76
*/
#include<bits/stdc++.h>
 using namespace std; 
 int a[10000][10000]={0},s[10000]; 
 bool cmp(int a,int b){
     return a>b;
 }
 int main(){
     int n,i,j,x,y,r,c,tot,minn=9999;
    
     scanf("%d",&n);
     for(int i=0;i<n;i++)
     scanf("%d",&s[i]);
     sort(s,s+n,cmp);
     for(i=1;i<=sqrt(n*1.0);i++) 
     {
         if(n%i==0)
         {
             if(n/i-i<minn){
                 minn=n/i-i;
                 r=i;
             }
         }        
     }
     c=n/r;
     a[0][0]=s[0];
     tot=x=y=0;
     while(tot < r * c-1)
     {
         while(y + 1 < r && ! a[x][y + 1])
             a[x][++y] = s[++tot];
         while(x + 1 < c && !a[x + 1][y])
             a[++x][y] = s[++tot];
         while(y - 1 >= 0 && !a[x][y - 1])
             a[x][--y] = s[++tot];
         while(x - 1 >= 0 && !a[x - 1][y])
             a[--x][y] = s[++tot];   
     }
     for(i=0;i<c;i++){
        printf("%d",a[i][0]);
         for(j=1;j<r;j++){
                 printf(" %d",a[i][j]);
         } 
        printf("\n");
     }
     return 0;
 }
/****************************************************************************************************/
/*
1036. 跟奥巴马一起编程(15)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
8000 B
判题程序 
Standard 
作者 
CHEN, Yue
美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。
2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！ 
输入格式： 
输入在一行中给出正方形边长N（3<=N<=20）和组成正方形边的某种字符C，间隔一个空格。 
输出格式： 
输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。
输入样例：
10 a
输出样例：
aaaaaaaaaa
a        a
a        a
a        a
aaaaaaaaaa
*/
#include<iostream>
using namespace std;
  
int main()  
{  
    int n, N, k, i = 0;  
    char c;  
    cin>>n>>c;
    if(n%2)  
        N = n/2 + 1;  
    else  
        N = n/2;  
    while(i < N)  
    {  
        if((0 == i) || (N - 1 == i))  
        {  
            for(k = 0; k < n; ++k)  
                printf("%c", c);  
        }  
        else  
        {  
            for(k = 0; k < n; ++k)  
            {  
                if((k==0) || (k==n-1))  
                    printf("%c", c);  
                else  
                    printf(" ");  
            }  
        }  
        printf("\n");  
        ++i;  
    }  
  
    return 0;  
}  
/****************************************************************************************************//*
1027. 打印沙漏(20)
本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
*****
 ***
  *
 ***
*****
所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，
再从小到大顺序递增；首尾符号数相等。
给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。
输入格式： 
输入在一行给出1个正整数N（<=1000）和一个符号，中间以空格分隔。 
输出格式： 
首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。 
输入样例：
19 *
输出样例：
*****
 ***
  *
 ***
*****
2
*/ 
/* 
#include<iostream>
#include<math.h>
using namespace std;

int main()
{
	int n;
	int i,j,k;
	char ch;
	int line;
	while(scanf("%d %c",&n,&ch)!=EOF&&n<=1000)
	{
		line=(int)sqrt(2*n+2)-1;
		i=0;
		j=0;

		for(i=line;i>=1;i=i-2)
		{
			for(j=0;j<(line-i)/2;j++)
				cout<<' ';
			for(j=0;j<i;j++)
				printf("%c",ch);
			//	cout<<ch;
			cout<<'\n'; 
		}
		for(i=3;i<=line;i+=2)
		{
			for(j=0;j<(line-i)/2;j++)
				cout<<' ';
			for(j=0;j<i;j++)
				printf("%c",ch);
				//cout<<ch;
			cout<<'\n'; 
		 } 
		
		cout<<n-(line+3)*(line-1)/2-1<<endl;
	
	}
	
	return 0;
}*/
/*
可提交
*/
#include <iostream>
#include <math.h>
using namespace std;

int main()
{
    int n,i,j,t,re,a=-1,temp=-1;
    char c;
    scanf("%d %c",&n,&c);
    while(temp<=n)
    {
        re = n-temp;//re记录剩余个数 
        a+=2;		//a为行数 
        temp+=2*a;	//temp为所需符号的总数 
    }
    a-=2;//行数 
    t=(a-1)/2;
    for(i=0;i<a;i++)
    {
        for(j=0;j<t-abs(i-t);j++)
            printf(" ");
        for(j=0;j<abs(i-t)*2+1;j++)
            printf("%c",c);
        printf("\n");
    }
    printf("%d\n",re);
    system("pause");
    return 0;
} 





/****************************************************************************************************/
