/*
2.二十四点 (15分) 
C时间限制：1?毫秒?|? C内存限制：3000?Kb
题目内容：
问题描述：输入4个数，通过 加、减、乘、除运算看能否得到 结果 24，每个数只用一次。
输入描述
输入四个正整数
输出描述
能通过某种方式得到24则输出1，不能则输出0
输入样例
6 6 6 6
输出样例
1
*/

#include<stdio.h>
#include<stdlib.h>
char mark[4]={'+','-','*','/'};

float cal(float x,float y,int mark)//定义计算函数 
{
  switch(mark)
  {
    case 0:return x+y;
    case 1:return x-y;
    case 2:return x*y;
    case 3:return x/y;
  }
}

/*calculateA~calculateE分别计算所有括号情况，函数算法为括号优先级*/ 
float calculate_A(float a,float b,float c,float d,int mark1,int mark2,int mark3)
{
  float r1,r2,r3;
  r1=cal(a,b,mark1);
  r2=cal(r1,c,mark2);
  r3=cal(r2,d,mark3);
  return r3;
}
float calculate_B(float a,float b,float c,float d,int mark1,int mark2,int mark3)
{
  float r1,r2,r3;
  r1=cal(b,c,mark2);
  r2=cal(a,r1,mark1);
  r3=cal(r2,d,mark3);
  return r3;
}
float calculate_C(float a,float b,float c,float d,int mark1,int mark2,int mark3)
{
  float r1,r2,r3;
  r1=cal(c,d,mark3);
  r2=cal(b,r1,mark2);
  r3=cal(a,r2,mark1);
  return r3;
}
float calculate_D(float a,float b,float c,float d,int mark1,int mark2,int mark3)
{
  float r1,r2,r3;
  r1=cal(b,c,mark2);
  r2=cal(r1,d,mark3);
  r3=cal(a,r2,mark1);
  return r3;
}
float calculate_E(float a,float b,float c,float d,int mark1,int mark2,int mark3)
{
  float r1,r2,r3;
  r1=cal(a,b,mark1);
  r2=cal(c,d,mark3);
  r3=cal(r1,r2,mark2);
  return r3;
}

/*get函数为计算函数，若有解法，flag为1，若没有解法，flag为0*/ 
float get(int a,int b,int c,int d)
{
  int mark1,mark2,mark3;
  float flag=0;
  for(mark1=0;mark1<4;mark1++)//四个数字只能同时存在三种运算符，遍历所有运算符的情况 
  {
    for(mark2=0;mark2<4;mark2++)
    {
      for(mark3=0;mark3<4;mark3++)
      {
        if(calculate_A(a,b,c,d,mark1,mark2,mark3)==24)
        {
          //printf("((%d%c%d)%c%d)%c%d=24\n",a,mark[mark1],b,mark[mark2],c,mark[mark3],d);
          flag=1;
        }
        else if(calculate_B(a,b,c,d,mark1,mark2,mark3)==24)
        {
          //printf("(%d%c(%d%c%d))%c%d=24\n",a,mark[mark1],b,mark[mark2],c,mark[mark3],d);
          flag=1;
        }
        else if(calculate_C(a,b,c,d,mark1,mark2,mark3)==24)
        {
          //printf("%d%c(%d%c(%d%c%d))=24\n",a,mark[mark1],b,mark[mark2],c,mark[mark3],d);
          flag=1;
        }
        else if(calculate_D(a,b,c,d,mark1,mark2,mark3)==24)
        {
          //printf("%d%c((%d%c%d)%c%d)=24\n",a,mark[mark1],b,mark[mark2],c,mark[mark3],d);
          flag=1;
        }
        else if(calculate_E(a,b,c,d,mark1,mark2,mark3)==24)
        {
          //printf("(%d%c%d)%c(%d%c%d)=24\n",a,mark[mark1],b,mark[mark2],c,mark[mark3],d);
          flag=1;
        }
      }
    }

  }
  printf("%.0f\n",flag);
  return flag;
}


int main()
{
  int a,b,c,d;
//  printf("Please input 4 numbers(1~13):");
  scanf("%d%d%d%d",&a,&b,&c,&d);
    if((a>=1&&a<=13)&&(b>=1&&b<=13)&&(c>=1&&c<=13)&&(d>=1&&d<=13))
    {
      get(a,b,c,d);
    }
/*      else
      {
        printf("Input illegal,please input again(1~13):");
        scanf("%d%d%d%d",&a,&b,&c,&d);
        if((a>=1&&a<=13)&&(b>=1&&b<=13)&&(c>=1&&c<=13)&&(d>=1&&d<=13))
         {
              get(a,b,c,d);
         }
      }*/
      //printf("%d\n",y);
 // system("pause");
 return 0;
 
}
/*************************************************************************************************/
/*
2.钱组合数 (15分) 
C时间限制：3?毫秒?|? C内存限制：3000?Kb
题目内容：
给你足够多的1，2，5面值的钱币，输入一个钱数n，设计一个程序使能够计算出所有的组合！
输入描述
钱数N
输出描述
所有的组合数的个数
输入样例
20
输出样例
29
*/

#include<stdio.h>
int main()
{
	int money,a,b,c,i;
	scanf("%d",&money);
	i=0;
	for(a=0;a<=money;a++)
	for(b=0;b<=money/2;b++)
	for(c=0;c<=money/5;c++)
	{
	if(1*a+2*b+c*5==money)
	i=i+1;
	}
	printf("%d",i);
	return 0;
 } 

/*************************************************************************************************/
/*
砝码组合
题目内容：
用天平称重时，我们希望用尽可能少的砝码组合称出尽可能多的重量。
如果只有5个砝码，重量分别是1，3，9，27，81。
则它们可以组合称出1到121之间任意整数重量（砝码允许放在左右两个盘中）。
本题目要求编程实现：对用户输入的重量(1~121)，
给出砝码组合方案（用加减式表示，减代表砝码放在物品盘）。
例如：
输入：
5
输出：
9-3-1
输入：
19
输出：
27-9+1
要求程序输出的组合总是大数在前小数在后。
输入描述
用户输入的重量(1~121)，
输出描述
给出砝码组合方案（用加减式表示，减代表砝码放在物品盘）。
输入样例
19
输出样例
27-9+1
*/ 

/*
编程思路：把数字用三进制表示出来，然后把三进制中的2换成-1，
同时向前进一位，先转换输出最后一位数字 ，之后的数字如果是1则表示+，
如果是-1则表示-，如果是0 则不做变换 
*/
#include<stdio.h>

int fun(int p)
{
	int i=1,j;
	for(j=0;j<p;j++)
	{
		i=3*i;
	}
	return i;
}

int main()
{
	int n,i,j,k;
	int a[6]={0};
	
	scanf("%d",&n);
	
	for(i=0;i<6;i++)//进行三进制转换并将2换为-1同时向前进一位 
	{
		a[i]=n%3+a[i];
		if(a[i]==3)
		{
			a[i]=0;
			a[i+1]=1;
		}
		else if(a[i]==2)
		{
			a[i]=-1;
			a[i+1]=1;
		}
		n=n/3;
		if(n==0)
		{
			break;
		}	
	}
	
	if(a[i+1]==1) 
	printf("%d",fun(i+1));
	
	for(j=i;j>-1;j--)
	{
		if(a[j]==1)
		{
			printf("+%d",fun(j));
		}
		if(a[j]==-1)
		{
			printf("-%d",fun(j));
		}
	}
	return 0;
}
/*************************************************************************************************/
/*
题目内容：
把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？
M, N为自然数。说明：如有7个苹果，3个盘子，
则(5, 1, 1)和(1, 5, 1)和(1, 1, 5)都是同一种分法。
输入描述
第一行一个整数表示数据的组数（多组数据），对于每组数据第一行是苹果个数M (1 ≤ m ≤ 100) ，
第二行是盘子个数N(1 ≤ n ≤ 100)。
输出描述
每组数据输出一行,放苹果的方法个数。
输入样例
1 
3 
2
输出样例
2
*/
#include<stdio.h>

int fun(int m,int n)
{
	if(m==0||n==1)//如果没有苹果或者只有一个盘子，则只有一种情况 
	return 1;
	if(n>m)//当n>m时，必定有n-m个盘子空着，即为m个苹果放到m个盘子的情况 
	return fun(m,m); 
	else 
	return fun(m,n-1)+fun(m-n,n);
	/*
	当n <= m:不同的放法可以分成两类：含有0的方案数，不含有0的方案数
含有0的方案数，即有至少一个盘子空着，即相当于 f(m,n)=f(m,n-1);
不含有0的方案数，即所有的盘子都有苹果，相当于可以从每个盘子中拿掉一个苹果，
不影响不同放法的数目，即 f(m,n)=f(m-n,n).
而总的放苹果的放法数目等于两者的和，即 f(m,n)=f(m,n-1)+f(m-n,n)
	*/ 
 } 

int main()
{
	int m,n,c,i,j,k;
	scanf("%d",&c);//c为测试数据组数 
	for(i=0;i<c;i++)
	{
		scanf("%d",&m);//有m个苹果放入n个盘子 
		scanf("%d",&n);
		printf("%d",fun(m,n));
	}
}
/*************************************************************************************************/
/*
8.甲乙混战 (15分) 
C时间限制：3000?毫秒?|? C内存限制：3000?Kb
题目内容：
 某游戏规则中，甲乙双方每个回合的战斗总是有一方胜利，一方失败。
游戏规定：失败的一方要把自己的体力值的1/4加给胜利的一方。例如：
如果双方体力值当前都是4，则经过一轮战斗后，双方的体力值会变为：5，3。
现在已知：双方开始时的体力值甲：1000，乙：2000。
假设战斗中，甲乙获胜的概率都是50%求解：双方经过4个回合的战斗，
体力值之差小于1000的理论概率。
输入描述
此题直接编译出结果就可，不需要输入数据
输出描述
输出4个回合的战斗后体力值之差小于1000的理论概率，保留6位小数
输入样例
此题直接编译出结果就可，不需要输入数据
输出样例
0.625000
*/ 
#include<stdio.h>
#include<stdlib.h> 
int abs(int x)
{
	if(x>=0)
	return x;
	else
	return -x;
}


int main()
{
	int x=1000,y=2000;
	int i,j,k,t,s,count=0;
	for(i=0;i<16;i++)//总共16种胜负结果的情况
	{
		x=1000;
		y=2000;
		for(k=0;k<4;k++)//取0-15的从左到右数的1~4位 
		{
			t=i>>k&1;//i的二进制中，从右往左数，取第k+1位上的值 
	
			if(t==1)//甲获得胜利
			{
				x+=y/4;
				y-=y/4; 
			} 
			else
			{
				y+=x/4;
				x-=x/4;
			}
		}
		if(abs(x-y)<1000)
		count++;
	 } 
	printf("%.6lf\n",(double)(count)/16);
	
	return 0;
}
/*************************************************************************************************/
/*
4.组合数 (15分) 
题目内容：
 找出n个自然数（1,2···n）中取r个数的组合，例如当n=5，r=3时所有组合为
1 2 3 
1 2 4
1 2 5
1 3 4
1 3 5
1 4 5
2 3 4
2 3 5
2 4 5
3 4 5
此题只需求出组合数的个数
输入描述
输入两个正整数n、r
输出描述
计算出n个自然数中取r个数的组合数的个数
输入样例
5 3
20 18
输出样例
10
190
*/ 

#include<stdio.h>

int pow(int x)
{
	int i,s=1;
	for(i=1;i<=x;i++)
	s=s*i;
	return s;
}

int main()
{
	int n,r,m;
	scanf("%d%d",&n,&r);

	m=pow(n)/(pow(r)*pow(n-r));

	printf("%d",m);
	return 0;	
}
/*************************************************************************************************/
/*
14.涂色问题 (15分) 
题目内容：
有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，
要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法。
输入描述
输入正整数n
输出描述
输出结果
输入样例
5
输出样例
30
*/

#include<stdio.h>
int main()
{
	int a[100]={0,3,6,6};
	int n,i;
	scanf("%d",&n);
	for(i=4;i<=n+1;i++)
	a[i]=a[i-1]+2*a[i-2];
	
	printf("%d",a[n]);	
	return 0;
}


/*************************************************************************************************/
/*
嫌疑犯 
题目内容：
 公安人员审问四名窃贼嫌疑犯。已知，这四人当中仅有一名是窃贼，还知道这四人中每人要么是诚实的，
 要么总是说谎的。在回答公安人员的问题中：
甲说：“乙没有偷，是丁偷的。”
乙说：“我没有偷，是丙偷的。”
丙说：“甲没有偷，是乙偷的。”
丁说：“我没有偷。”
请根据这四人的答话判断谁是盗窃者。
*问题分析与算法设计
假设A、B、C、D分别代表四个人，变量的值为1代表该人是窃贱。
由题目已知：四人中仅有一名是窃贱，且这四个人中的每个人要么说真话，要么说假话，
而由于甲、乙、丙三人都说了两句话：“X没偷，X偷了”，故不论该人是否说谎，他提到的两人中
必有一人是小偷。故在列条件表达式时，可以不关心谁说谎，谁说实话。这样，可以列出下列条件
表达式：
甲说：”乙没有偷，是丁偷的。”B+D=1
乙说：“我没有偷，是丙偷有。”B+C=1
丙说：“甲没有偷，是乙偷的。”A+B=1
丁说：“我没有偷。”A+B+C+D=1
其中丁只说了一句话，无法判定其真假，表达式反映了四人中仅有一名是窃贱的条件。
输入描述 
此题不需要输入
输出描述
直接输出A,B,C,D中的一个，输出的那个则为窃贼
输入样例
此题不需要输入
输出样例
B
*/
#include<stdio.h>
int main() 
{
   int x[4]={0};//数组中1表示窃贼,0则不是
   int i;
   int a,b,c,d;//用于穷举四人所说的真假
   for(i=0;i<4;x[i++]=0)
   {
      x[i]=1;//假定一个人是窃贼
      for(a=0;a<2;a++)//穷举每种真假组合
      for(b=0;b<2;b++)
      for(c=0;c<2;c++)
      for(d=0;d<2;d++)
      {
         if((x[3]==0)==a)//判断是否符合
         if((x[1]==0)==b&&(x[3]==1)==b)
         if((x[1]==0)==c&&(x[2]==1)==c)
         if((x[0]==0)==d&&(x[1]==1)==d)
            switch(i)//输出符合的那种假设
            {
               case 0:printf("甲");break;
               case 1:printf("乙");break;
               case 2:printf("丙");break;
               case 3:printf("丁");break;
            }
      }      
   }
return 0;
}

/*************************************************************************************************/
/*
6.考新郎 (10分) 
题目内容：
国庆期间,省城HZ刚刚举行了一场盛大的集体婚礼,为了使婚礼进行的丰富一些,
司仪临时想出了有一个有意思的节目,叫做"考新郎",具体的操作是这样的:首先,
给每位新娘打扮得几乎一模一样,并盖上大大的红盖头随机坐成一排;然后,
让各位新郎寻找自己的新娘.每人只准找一个,并且不允许多人找一个.
最后,揭开盖头,如果找错了对象就要当众跪搓衣板..
假设一共有N对新婚夫妇,其中有M个新郎找错了新娘,求发生这种情况一共有多少种可能.
输入描述
N M
输出描述
可能的种数
输入样例
3 2
输出样例
3
*/
/*思路分析：组合数+有条件错排*/
#include<stdio.h>
int jc(int x)//阶乘函数 
{
	int i,j=1;
	for(i=1;i<=x;i++)
	{
		j*=i;
	}
	return j;
}

int zh(int m,int n)//组合数函数 
{
	int s;
	s=jc(n)/(jc(n-m)*jc(m));
	return s;
}

int main()
{
	int n,m;
	int j;
	double array[1000] = {0,0,1};//定义错排数组 
	double out = 1;
	scanf("%d%d",&n,&m);
	out=zh(m,n);//第一步：计算组合数 
	for(j=3;j<1000;j++)//第二步：计算m个元素的错排数 
	{
		array[j]=((double)(j-1))*(array[j-1]+array[j-2]);//错排公式 
	}
	out=array[m]*out;//最后：种类数为组合数乘以错排数  
	printf("%.0lf",out);
	return 0;
}
/*************************************************************************************************/
/*
7.乒乓球比赛 (10分) 
题目内容：
 两个乒乓球队进行比赛，各出三人。甲队为a，b，c三人，乙队为x，y，z三人。已抽签
决定比赛名单。共三场比赛，所有队员必须参加比赛。有人向队员打听比赛的名单，
a说他不和x比，c说他不和x，z比，请编程找出三场比赛赛手的名单。
输入描述
不需要输入
输出描述
假设a和y比，则输出
a vs y
严格按照上面的格式输出，不要有多余的文字叙述或符号，每场比赛输出占一行
输入样例
不需要输入
输出样例
a vs y
*/ 

#include<stdio.h>
int main()
{
	int i,j,k;
	char  a[4],b[4];
	a[0]='a';a[1]='b';a[2]='c';
	b[0]='x';b[1]='y';b[2]='z';
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			if(a[i]=='c'&&b[j])
			{
				if(b[j]=='x'||b[j]=='z')
				continue;
				else
				{
				printf("%c vs %c\n",a[i],b[j]);
				b[j]=0;	
				a[i]=0;	
				}
			}
			else if(a[i]=='a'&&b[j])
			{
				if(b[j]=='x'||b[j]=='y')
				continue;
				else
				{
					printf("%c vs %c\n",a[i],b[j]);
					b[j]=0;
					a[i]=0;
				}
			}
			else if(a[i]=='b'&&b[j])
			{
				if(b[j]=='z'||b[j]=='y')
				continue;
				else
				{
					printf("%c vs %c\n",a[i],b[j]);
					b[j]=0;
					a[i]=0;
				}
				
			}
		//	printf("%c vs %c\n",a[i],b[j]);
		}
	}
	
	
	
	
	return 0;
}

/*正常代码*/ 
/*
#include<stdio.h>
int main()
{
	char i,j,k;//i是A的对手，j是B的对手，k是C的对手
	for(i='x';i<='z';i++)
	{
		for(j='x';j<='z';j++)
		{
			if(i!=j)
			{
				for(k='x';k<='z';k++)
				{
					if(i!=k&&j!=k)
					{
						if(i!='x'&&k!='x'&&k!='z')
						{
							printf("a vs %c\nb vs %c\nc vs %c\n", i, j, k);
						}
					}
				}
			}
		}
	}
	return 0;
}
*/





