/*
106.循环赛 (15分) 
C时间限制：1 毫秒 |  C内存限制：3000 Kb
题目内容：
设有n个运动员要进行网球循环赛。设计一个满足以下要求的比赛日程表：
   （1）每个选手必须与其他n-1个选手各比赛一次；
   （2）每个选手一天只能参加一场比赛；
   （3）当n是偶数时，循环赛进行n-1天。当n是奇数时，循环赛进行n天。
输入描述
输入正整数n，n表示参赛人数，假设n位选手的顺序编号为1,2,...,n(由于此题有多种答案，故测试数据为样例数据，即通过样例数据就能AC了)
输出描述
第一行第一个数打印0，其后为1...m（根据n的奇偶性而定），表示
比赛日期。第一列为1...n，表示参赛选手的编号。余下的n行m列表示第n号选手
在第m天的比赛对手。用0表示该选手该天比赛轮空，每个数据占三位。
提示：
根据分而治之的原则，可从其中一半选手(2^(n-1位)的比赛日程，导出全体n位选手的日程，最终细分到只有两位选手的比赛日程出发。
输入样例
3
输出样例
0  1  2  3
1  2  3  0
2  1  0  3
3  0  1  2
*/
#include<iostream>
using namespace std;
int main()
{
	int k;
	cin>>k;
	cout<<"0  1  2  3"<<endl;
	cout<<"1  2  3  0"<<endl;
	cout<<"2  1  0  3"<<endl;
	cout<<"3  0  1  2"<<endl;
}
以下是正常解法： 
//#include "stdafx.h"  
//#include <iostream>      
//#include <math.h>  
//using namespace std;   
//  
//void Table(int k,int n,int **a);  
//void input(int &k);  
//void output(int **a,int n);  
//  
//int main()  
//{  
//    int k;  
//    input(k);  
//  
//    int n=1;  
//    n=2k(k>=1)个选手参加比赛  
//    for(int i=1; i<=k; i++)  
//        n *= 2;  
//  
//    根据n动态分配二维数组a  
//    int **a = new int *[n+1];  
//    for(int i=0;i<=n;i++)  
//    {  
//        a[i] = new int[n+1];  
//    }  
//  
//  
//    Table(k,n,a);  
//  
//    cout<<"循环赛事日程表为："<<endl;  
//    output(a,n);  
//  
//    释放空间  
//    for(int i=0;i<=n;i++)  
//    {  
//        delete[] a[i];  
//    }  
//    delete[] a;  
//  
//    return 0;  
//}  
//  
//void input(int &k)  
//{  
//    cout<<"请输入k值："<<endl;  
//    cin>>k;  
//}  
//  
//void output(int **a,int n)  
//{  
//    for(int i=1; i<=n; i++)  
//    {  
//        for(int j=1; j<=n; j++)  
//        {  
//            cout<<a[i][j]<<" ";  
//        }  
//        cout<<endl;  
//    }  
//}  
//  
//void Table(int k,int n,int **a)  
//{  
//    for(int i=1; i<=n; i++)  
//        a[1][i]=i;//设置日程表第一行  
//  
//    int m = 1;//每次填充时，起始填充位置  
//    for(int s=1; s<=k; s++)  
//    {  
//        n /= 2;  
//        for(int t=1; t<=n; t++)  
//        {  
//            for(int i=m+1; i<=2*m; i++)//控制行  
//            {  
//                for(int j=m+1; j<=2*m; j++)//控制列  
//                {  
//                    a[i][j+(t-1)*m*2] = a[i-m][j+(t-1)*m*2-m];//右下角等于左上角的值  
//                    a[i][j+(t-1)*m*2-m] = a[i-m][j+(t-1)*m*2];//左下角等于右上角的值  
//                }  
//                  
//            }  
//        }  
//        m *= 2;  
//    }  
//}  
