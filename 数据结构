/******************************************************************************************************************/
/*
1025. 反转链表 (25)
给定一个常数K以及一个单链表L，请编写程序将L中每K个结点反转。例如：给定L为1→2→3→4→5→6，K为3，
则输出应该为3→2→1→6→5→4；如果K为4，则输出应该为4→3→2→1→5→6，即最后不到K个元素不反转。
输入格式： 
每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址、结点总个数正整数N(<= 105)、以及正
整数K(<=N)，即要求反转的子链结点的个数。结点的地址是5位非负整数，NULL地址用-1表示。
接下来有N行，每行格式为：
Address Data Next
其中Address是结点地址，Data是该结点保存的整数数据，Next是下一结点的地址。
输出格式： 
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。
输入样例：
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
输出样例：
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
*/ 
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdio>
using namespace std;

struct Node{
	int address;
	int data;
	int next;
};
int main(){
    int N,first,K;
    vector<Node> shunxu;
    vector<Node> reverse;
    cin>>first>>N>>K;
    Node n;
    Node addr[100000];      //链表数组 
    for(int i=0;i<N;i++){
        cin>>n.address>>n.data>>n.next;
        addr[n.address]=n;  //将节点赋值到相应下标的位置 
    }
    int nextaddress=first;   
    while (nextaddress != -1){  //通过next作为下标寻找元素，添加到vector中，更新next继续寻找 
        shunxu.push_back(addr[nextaddress]); 
        nextaddress = addr[nextaddress].next;
    }
    int size=shunxu.size(); //输入的节点可能有些不在链表中，记录下链表的长度 
    int temp=K-1;
    while(temp<size){       //反转链表，每次翻转K个，不足K个不反转并退出循环 
        for(int i=temp;i>temp-K;i--){
            reverse.push_back(shunxu[i]);
        }
        temp+=K;
    }
    for(int i=temp-K+1;i<size;i++)//将最后没有反转的，复制到反转之后的链表 
        reverse.push_back(shunxu[i]);
    for(int i=0;i<size-1;i++){      //修改他们的next，改为下一个元素的address 
        reverse[i].next=reverse[i+1].address;
        printf("%05d %d %05d\n",reverse[i].address,reverse[i].data,reverse[i].next);  
    }
    printf("%05d %d %d\n",reverse[size-1].address,reverse[size-1].data,-1);

    return 0;
}
/*int main()
{
	int N,first,K;
	int i,j,k;
	vector<Node> shunxu;
	vector<Node> reverse;
	cin>>first>>N>>K;
	Node n;
	Node addr[100000];//建立链表数组
	 
	for(i=0;i<N;i++)
	{
		cin>>n.address >>n.data>>n.next ;
		addr[n.address]=n;//将节点赋值到地址的位置 
	}
	
	int nextaddress=first;
	while(nextaddress!=-1)//通过next作为下标来寻找元素，添加到vector中，不断更新next 
	{
		shunxu.push_back(addr[nextaddress]);
		nextaddress=addr[nextaddress].next;
	}
	int  size=shunxu.size();//输入的节点有可能不在链表中，记录链表长度
	int temp=K-1;
	while(temp<size)
	{
		for(i=temp;i>temp-K;i--)
		{
			reverse.push_back(shunxu[i]);	
		}
		temp+=k;
	 } 
	for(i=temp-K+1;i<size;i++)
	{
		reverse.push_back(shunxu[i]);//将最后没有反转的，复制到反转之后的链表		
	}
	for(i=0;i<size-1;i++)
	{
		reverse[i].next=reverse[i+1].address;//修改他们的next，改为下一个元素的address 
		printf("%05d %d %05d\n",reverse[i].address,reverse[i].data,reverse[i].next); 
	}
	printf("%05d %d %d\n",reverse[size-1].address,reverse[size-1].data,-1);

	return 0; 
}

*/
/******************************************************************************************************************/
/*
6-1 单链表逆转（20 分）
本题要求实现一个函数，将给定的单链表逆转。
函数接口定义：
List Reverse( List L );
其中List结构定义如下：
typedef struct Node *PtrToNode;
struct Node {
    ElementType Data; //存储结点数据 
    PtrToNode   Next; // 指向下一个结点的指针 
};
typedef PtrToNode List; //定义单链表类型 
L是给定单链表，函数Reverse要返回被逆转后的链表。
裁判测试程序样例：
#include <stdio.h>
#include <stdlib.h>
typedef int ElementType;
typedef struct Node *PtrToNode;
struct Node {
    ElementType Data;
    PtrToNode   Next;
};
typedef PtrToNode List;
List Read(); 
void Print( List L ); 
List Reverse( List L );
int main()
{
    List L1, L2;
    L1 = Read();
    L2 = Reverse(L1);
    Print(L1);
    Print(L2);
    return 0;
}
你的代码将被嵌在这里 
输入样例：
5
1 3 4 5 2
输出样例：
1
2 5 4 3 1
*/


#include <stdio.h>
#include <stdlib.h>
typedef int ElementType;
typedef struct Node *PtrToNode;
struct Node {
    ElementType Data;
    PtrToNode   Next;
};
typedef PtrToNode List;
List Read(); 
void Print( List L ); 
List Reverse( List L );
int main()
{
    List L1, L2;
    L1 = Read();
    L2 = Reverse(L1);
    Print(L1);
    printf("\n");
    Print(L2);
    return 0;
}







List Read(){  
    int num,i;  
    scanf("%d",&num);  
    List L1;  
    L1 = NULL;  
     
    while (num) {  
        scanf("%d",&i);  
        PtrToNode p = (Node *)malloc(sizeof(Node));  
        p->Data = i;  
        p->Next = NULL;  
        if(L1 == NULL){  
            L1 = p;  
        }else{  
            PtrToNode tmp = L1;  
            for(; tmp->Next; tmp=tmp->Next);  // point!!!  
            tmp->Next = p;  
        }  
        num--;  
    }  
    return L1;  
}  
  
void Print(List L){  
    PtrToNode p = (Node *)malloc(sizeof(Node));  
    int k=0;
    for(p=L; p ;p=p->Next)
	{
	printf("%d ",p->Data);
	  }  
         
}  
List Reverse( List L ){  
    PtrToNode p,q;  
    for(p=L; p; ){  
        q = p->Next;  
        if(q){  
            p->Next = q->Next;  
            q->Next = L;  
            L = q;  
        }else  
            break;  
    }  
    return L;  
}  
/******************************************************************************************************************/
/*
6-2 顺序表操作集（20 分）
本题要求实现顺序表的操作集。
函数接口定义：
List MakeEmpty(); 
Position Find( List L, ElementType X );
bool Insert( List L, ElementType X, Position P );
bool Delete( List L, Position P );
其中List结构定义如下：
typedef int Position;
typedef struct LNode *List;
struct LNode {
    ElementType Data[MAXSIZE];
    Position Last; //保存线性表中最后一个元素的位置 
};
各个操作函数的定义为：
List MakeEmpty()：创建并返回一个空的线性表；
Position Find( List L, ElementType X )：返回线性表中X的位置。若找不到则返回ERROR；
bool Insert( List L, ElementType X, Position P )：将X插入在位置P并返回true。若空间已满，则打印“FULL”并返回false；如果参数P指向非法位置，则打印“ILLEGAL POSITION”并返回false；
bool Delete( List L, Position P )：将位置P的元素删除并返回true。若参数P指向非法位置，则打印“POSITION P EMPTY”（其中P是参数值）并返回false。
裁判测试程序样例：
#include <stdio.h>
#include <stdlib.h>

#define MAXSIZE 5
#define ERROR -1
typedef enum {false, true} bool;
typedef int ElementType;
typedef int Position;
typedef struct LNode *List;
struct LNode {
    ElementType Data[MAXSIZE];
    Position Last; /* 保存线性表中最后一个元素的位置 
};

List MakeEmpty(); 
Position Find( List L, ElementType X );
bool Insert( List L, ElementType X, Position P );
bool Delete( List L, Position P );

int main()
{
    List L;
    ElementType X;
    Position P;
    int N;

    L = MakeEmpty();
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        if ( Insert(L, X, 0)==false )
            printf(" Insertion Error: %d is not in.\n", X);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        P = Find(L, X);
        if ( P == ERROR )
            printf("Finding Error: %d is not in.\n", X);
        else
            printf("%d is at position %d.\n", X, P);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &P);
        if ( Delete(L, P)==false )
            printf(" Deletion Error.\n");
        if ( Insert(L, 0, P)==false )
            printf(" Insertion Error: 0 is not in.\n");
    }
    return 0;
}

/* 你的代码将被嵌在这里 
输入样例：
6
1 2 3 4 5 6
3
6 5 1
2
-1 6
输出样例：
FULL Insertion Error: 6 is not in.
Finding Error: 6 is not in.
5 is at position 0.
1 is at position 4.
POSITION -1 EMPTY Deletion Error.
FULL Insertion Error: 0 is not in.
POSITION 6 EMPTY Deletion Error.
FULL Insertion Error: 0 is not in.
*/ 


#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 5
#define ERROR -1
//typedef enum {false, true} bool;
typedef int ElementType;
typedef int Position;
typedef struct LNode *List;
struct LNode {
    ElementType Data[MAXSIZE];
    Position Last; //保存线性表中最后一个元素的位置 
};

List MakeEmpty(); 
Position Find( List L, ElementType X );
bool Insert( List L, ElementType X, Position P );
bool Delete( List L, Position P );

int main()
{
    List L;
    ElementType X;
    Position P;
    int N;

    L = MakeEmpty();
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        if ( Insert(L, X, 0)==false )
            printf(" Insertion Error: %d is not in.\n", X);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        P = Find(L, X);
        if ( P == ERROR )
            printf("Finding Error: %d is not in.\n", X);
        else
            printf("%d is at position %d.\n", X, P);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &P);
        if ( Delete(L, P)==false )
            printf(" Deletion Error.\n");
        if ( Insert(L, 0, P)==false )
            printf(" Insertion Error: 0 is not in.\n");
    }
    return 0;
}
List MakeEmpty()
{


    List L=(List)malloc(sizeof(struct LNode));
    L->Last=-1;
    return L;
}


Position Find( List L, ElementType X )
{
    Position i;
    for(i=0;i<=L->Last;i++)
    {
        if(L->Data[i]==X)
            return i;
    }
    return ERROR;
}


bool Insert( List L, ElementType X, Position P )
{
    Position i;


    if(L->Last>=MAXSIZE-1)
    {
        printf("FULL");
        return false;
    }
    else if(P<0||P>L->Last+1)
    {
        printf("ILLEGAL POSITION");
        return false;
    }
    else
    {
        for(i=L->Last;i>=P;i--)
        {
            L->Data[i+1]=L->Data[i];
        }
        L->Data[P]=X;
        L->Last++;
        return true;
    }
}

/*
bool Delete( List L, Position P )
{
    Position i;
    if(P<0||P>L->Last)
    {
        printf("POSITION %d EMPTY",P);
        return false;
    }
    else{
        for(i=P;i<L->Last;i++)
        {
            L->Data[i]=L->Data[i+1];
        }
        L->Last--;
        return true;
    }
}
*/

/*
List MakeEmpty()//创建并返回一个空的线性表；
{
	List L=(List)malloc(sizeof(struct LNode));
	L->Last=-1;
	return L;
}

Position Find( List L, ElementType X ) //返回线性表中X的位置。若找不到则返回ERROR；
{
	Position i;
	for(i=0;i<=L->Last;i++)
	{
		if(L->Data[i]==X)
		{
			return i;
		 } 
	 } 
	 return ERROR;
}
 
bool Insert( List L, ElementType X, Position P )//将X插入在位置P并返回true。若空间已满，则打印“FULL”并返回false；如果参数P指向非法位置，则打印“ILLEGAL POSITION”并返回false；
{
	Position i;
	if(L->Last>=MAXSIZE-1)
	{
		printf("FULL");
		return false;
	}
	else if(P<0||P>L->Last+1)
	{
		printf("ILLEGAL POSITION");
		return false;
	}
	else
	{
		for(i=L->Last;i>=P;i--)
		{
			L->Data[i+1]=L->Data[i];
		}
		L->Data[P]=X;
		L->Last++;
		return true;
	}
	
} 
*/
bool Delete( List L, Position P )//将位置P的元素删除并返回true。若参数P指向非法位置，则打印“POSITION P EMPTY”（其中P是参数值）并返回false。
{
	Position i;
	if(P<0||P>L->Last)
	{
		printf("POSITION %d EMPTY",P);
		return false;
	}
	else
	{
		for(i=P;i<L->Last;i++)
		{
			L->Data[i]=L->Data[i+1];
		}
		L->Last--;
		return true;
	}
}
//你的代码将被嵌在这里 
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
/******************************************************************************************************************/
